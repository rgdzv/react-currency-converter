[{"D:\\Practice\\VisualCode\\projects\\Example-10\\currency-converter\\src\\index.tsx":"1","D:\\Practice\\VisualCode\\projects\\Example-10\\currency-converter\\src\\App.tsx":"2","D:\\Practice\\VisualCode\\projects\\Example-10\\currency-converter\\src\\components\\Header\\Header.tsx":"3","D:\\Practice\\VisualCode\\projects\\Example-10\\currency-converter\\src\\components\\Card\\Card.tsx":"4","D:\\Practice\\VisualCode\\projects\\Example-10\\currency-converter\\src\\components\\Footer\\Footer.tsx":"5","D:\\Practice\\VisualCode\\projects\\Example-10\\currency-converter\\src\\helper\\interfaces.ts":"6"},{"size":219,"mtime":1607679434235,"results":"7","hashOfConfig":"8"},{"size":7521,"mtime":1609238786476,"results":"9","hashOfConfig":"8"},{"size":407,"mtime":1609235063121,"results":"10","hashOfConfig":"8"},{"size":2039,"mtime":1609237062487,"results":"11","hashOfConfig":"8"},{"size":553,"mtime":1609238898715,"results":"12","hashOfConfig":"8"},{"size":165,"mtime":1609186677075,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1emh7rl",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Practice\\VisualCode\\projects\\Example-10\\currency-converter\\src\\index.tsx",[],["28","29"],"D:\\Practice\\VisualCode\\projects\\Example-10\\currency-converter\\src\\App.tsx",["30","31","32"],"import './App.scss'\nimport axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport { Col, Container, Row } from 'react-grid-system'\nimport Card from './components/Card/Card'\nimport Footer from './components/Footer/Footer'\nimport Header from './components/Header/Header'\nimport { Countries } from './helper/interfaces'\nimport preloader from './images/preloader.gif'\n\nconst App: React.FC = () => {\n  \n  const [countries, setCountries] = useState<Countries[]>([])\n\n  const [fromCountryOption, setFromCountryOption] = useState('')\n  const [toCountryOption, setToCountryOption] = useState('')\n\n  const [fromCurrencyShortName, setFromCurrencyShortName] = useState('')\n  const [toCurrencyShortName, setToCurrencyShortName] = useState('')\n\n  const [fromCurrencySymbol, setFromCurrencySymbol] = useState('')\n  const [toCurrencySymbol, setToCurrencySymbol] = useState('')\n\n  const [fromCountryFlag, setFromCountryFlag] = useState('')\n  const [toCountryFlag, setToCountryFlag] = useState('')\n\n  const [fromCurrencyFullName, setFromCurrencyFullName] = useState('')\n  const [toCurrencyFullName, setToCurrencyFullName] = useState('')\n\n  const [fromFooterCurrencyRate, setFromFooterCurrencyRate] = useState(0)\n  const [toFooterCurrencyRate, setToFooterCurrencyRate] = useState(0)\n\n  const [amount, setAmount] = useState(1)\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)\n  const [exchangeRate, setExchangeRate] = useState(0)\n\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n\n  let fromAmount, toAmount\n  if (amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = parseFloat((amount * exchangeRate).toFixed(2))\n  } else {\n    toAmount = amount\n    fromAmount = parseFloat((amount / exchangeRate).toFixed(2))\n  }\n\n  const handleSetFromCurrency = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setFromCountryOption(e.target.value)\n    countries.map(country => {\n      if (e.target.value === country.name){\n        setFromCurrencyShortName(country.currencies[0].code)\n        setFromCurrencySymbol(country.currencies[0].symbol)\n        setFromCountryFlag(country.flag)\n        setFromCurrencyFullName(country.currencies[0].name)\n      }\n    })\n    setError('')\n  }\n\n  const handleSetToCurrency = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setToCountryOption(e.target.value)\n    countries.map(country => {\n      if (e.target.value === country.name){\n        setToCurrencyShortName(country.currencies[0].code)\n        setToCurrencySymbol(country.currencies[0].symbol)\n        setToCountryFlag(country.flag)\n        setToCurrencyFullName(country.currencies[0].name)\n      }\n    })\n    setError('')\n  }\n\n  const handleFromAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setAmount(parseFloat(e.target.value))\n    setAmountInFromCurrency(true)\n  }\n\n  const handleToAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setAmount(parseFloat(e.target.value))\n    setAmountInFromCurrency(false)\n  }\n\n  const fetchData = async () => {\n    try {\n      setLoading(true)\n      const currenciesResponse = await axios.get('https://api.frankfurter.app/currencies')\n      const currenciesData = await currenciesResponse.data\n      const countriesResponse = await axios.get('https://restcountries.eu/rest/v2/all')\n      const countriesData: Countries[] = await countriesResponse.data\n      const filteredCountriesData = countriesData.filter(country => {\n        const { currencies: [{ code }]} = country\n        return currenciesData[code]\n      })\n      setCountries(filteredCountriesData)\n      setFromCountryOption(filteredCountriesData[100].name)\n      setFromCurrencySymbol(filteredCountriesData[100].currencies[0].symbol)\n      setFromCurrencyShortName(filteredCountriesData[100].currencies[0].code)\n      setFromCountryFlag(filteredCountriesData[100].flag)\n      setFromCurrencyFullName(filteredCountriesData[100].currencies[0].name)\n  \n      setToCountryOption(filteredCountriesData[79].name)\n      setToCurrencySymbol(filteredCountriesData[79].currencies[0].symbol)\n      setToCurrencyShortName(filteredCountriesData[79].currencies[0].code)\n      setToCountryFlag(filteredCountriesData[79].flag)\n      setToCurrencyFullName(filteredCountriesData[79].currencies[0].name)\n\n      const baseCurrencyResponse = await axios.get(`https://api.frankfurter.app/latest?from=USD`)\n      const baseCurrencyResponceData = await baseCurrencyResponse.data.rates\n      const filteredBaseCurrency = Object.keys(baseCurrencyResponceData)[26]\n      setExchangeRate(baseCurrencyResponceData[filteredBaseCurrency])\n      setLoading(false)\n    } catch (err) {\n      setError(err.message)\n    }\n  }\n\n  const fetchConvertedCurrencies = async () => {\n    try {\n      if (fromCurrencyShortName && toCurrencyShortName) {\n        const convertedCurrenciesResponse = await axios.get(`https://api.frankfurter.app/latest?&amount=1&from=${fromCurrencyShortName}&to=${toCurrencyShortName}`)\n        const convertedCurrenciesResponseData = await convertedCurrenciesResponse.data.rates\n        setFromFooterCurrencyRate(convertedCurrenciesResponseData[toCurrencyShortName].toFixed(2))\n        setToFooterCurrencyRate(parseFloat((1 / convertedCurrenciesResponseData[toCurrencyShortName]).toFixed(2)))\n        setExchangeRate(convertedCurrenciesResponseData[toCurrencyShortName])\n      }\n    } catch(err) {\n      setError(err.message)\n    }\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  useEffect(() => {\n    fetchConvertedCurrencies()\n  }, [fromCurrencyShortName, toCurrencyShortName])\n\n  return (\n    <Container style={{ paddingTop: '20px', minHeight: '100vh'}}>\n      <Row>\n        <Col>\n          <Header>\n            Currency converter\n          </Header>\n        </Col>\n      </Row> \n      <Row justify='center'>\n        <Col style={{maxWidth: '350px'}}>\n          {loading \n            ?\n              <div className=\"loading\">\n                <img src={preloader} alt={preloader}/>\n              </div>\n            :\n              <>\n                <Card \n                  defaultCountry={fromCountryOption}\n                  changeSelectValue={handleSetFromCurrency}\n                  amount={fromAmount}\n                  changeInput={handleFromAmountChange}\n                  сurrencyShortName={fromCurrencyShortName}\n                  currencySymbol={fromCurrencySymbol}\n                  countryFlag={fromCountryFlag}\n                  currencyFullName={fromCurrencyFullName}\n                  countries={countries}\n                  currencyFooterName={toCurrencyShortName}\n                  footerCurrencyRate={fromFooterCurrencyRate}\n                />\n                <Card \n                  defaultCountry={toCountryOption}\n                  changeSelectValue={handleSetToCurrency}\n                  amount={toAmount}\n                  changeInput={handleToAmountChange}\n                  сurrencyShortName={toCurrencyShortName}\n                  currencySymbol={toCurrencySymbol}\n                  countryFlag={toCountryFlag}\n                  currencyFullName={toCurrencyFullName}\n                  countries={countries}\n                  currencyFooterName={fromCurrencyShortName}\n                  footerCurrencyRate={toFooterCurrencyRate}\n                />\n              </>\n          }\n          {error &&\n            <div className=\"error\">{error}</div>\n          }\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Footer/>\n        </Col>\n      </Row>   \n    </Container>\n  )\n}\n\nexport default App\n","D:\\Practice\\VisualCode\\projects\\Example-10\\currency-converter\\src\\components\\Header\\Header.tsx",[],"D:\\Practice\\VisualCode\\projects\\Example-10\\currency-converter\\src\\components\\Card\\Card.tsx",[],"D:\\Practice\\VisualCode\\projects\\Example-10\\currency-converter\\src\\components\\Footer\\Footer.tsx",[],"D:\\Practice\\VisualCode\\projects\\Example-10\\currency-converter\\src\\helper\\interfaces.ts",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":51,"column":27,"nodeType":"39","messageId":"40","endLine":51,"endColumn":29},{"ruleId":"37","severity":1,"message":"38","line":64,"column":27,"nodeType":"39","messageId":"40","endLine":64,"endColumn":29},{"ruleId":"41","severity":1,"message":"42","line":139,"column":6,"nodeType":"43","endLine":139,"endColumn":50,"suggestions":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchConvertedCurrencies'. Either include it or remove the dependency array.","ArrayExpression",["47"],"no-global-assign","no-unsafe-negation",{"desc":"48","fix":"49"},"Update the dependencies array to be: [fetchConvertedCurrencies, fromCurrencyShortName, toCurrencyShortName]",{"range":"50","text":"51"},[5517,5561],"[fetchConvertedCurrencies, fromCurrencyShortName, toCurrencyShortName]"]