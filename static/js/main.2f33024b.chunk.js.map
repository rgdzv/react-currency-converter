{"version":3,"sources":["components/Card/Card.tsx","components/Footer/Footer.tsx","components/Header/Header.tsx","images/preloader.gif","App.tsx","index.tsx"],"names":["Card","defaultCountry","changeSelectValue","amount","changeInput","сurrencyShortName","currencySymbol","countries","countryFlag","currencyFullName","currencyFooterName","footerCurrencyRate","className","value","onChange","map","country","name","length","slice","src","alt","type","min","Footer","href","memo","Header","children","Date","toLocaleDateString","App","fromAmount","toAmount","useState","setCountries","fromCountryOption","setFromCountryOption","toCountryOption","setToCountryOption","fromCurrencyShortName","setFromCurrencyShortName","toCurrencyShortName","setToCurrencyShortName","fromCurrencySymbol","setFromCurrencySymbol","toCurrencySymbol","setToCurrencySymbol","fromCountryFlag","setFromCountryFlag","toCountryFlag","setToCountryFlag","fromCurrencyFullName","setFromCurrencyFullName","toCurrencyFullName","setToCurrencyFullName","fromFooterCurrencyRate","setFromFooterCurrencyRate","toFooterCurrencyRate","setToFooterCurrencyRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","exchangeRate","setExchangeRate","loading","setLoading","error","setError","parseFloat","toFixed","fetchData","a","axios","get","currenciesResponse","data","currenciesData","countriesResponse","countriesData","filteredCountriesData","filter","code","currencies","symbol","flag","baseCurrencyResponse","rates","baseCurrencyResponceData","filteredBaseCurrency","Object","keys","message","fetchConvertedCurrencies","convertedCurrenciesResponse","convertedCurrenciesResponseData","useEffect","style","paddingTop","minHeight","justify","maxWidth","preloader","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kWAsEeA,G,MApDmB,SAAC,GAY5B,IAXLC,EAWI,EAXJA,eACAC,EAUI,EAVJA,kBACAC,EASI,EATJA,OACAC,EAQI,EARJA,YACAC,EAOI,EAPJA,uBACAC,EAMI,EANJA,eACAC,EAKI,EALJA,UACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,mBAEA,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,oBAAf,SACE,wBAAQC,MAAOZ,EAAgBa,SAAUZ,EAAzC,SACGK,GAAaA,EAAUQ,KAAI,SAACC,GAAD,OAC1B,wBAEEH,MAAOG,EAAQC,KAFjB,SAIGD,EAAQC,KAAKC,OAAS,GAEnBF,EAAQC,KAAKE,MAAM,EAAE,IAAM,MAE3BH,EAAQC,MAPPD,EAAQC,aAarB,sBAAKL,UAAU,oBAAf,UACE,sBAAKA,UAAU,4BAAf,UACE,8BAAIN,EAAJ,IAAqBD,KACrB,qBAAKe,IAAKZ,EAAaa,IAAKb,OAE9B,uBACEc,KAAK,SACLT,MAAOV,GAAkB,GACzBW,SAAUV,EACVmB,IAAI,SAGR,sBAAKX,UAAU,kBAAf,UACE,qBAAKA,UAAU,wBAAf,SAAwCH,IACxC,qBAAKG,UAAU,yBAAf,qBAA8CP,EAA9C,cAAqEM,EAArE,YAA2FD,aC7D7Fc,G,MAAmB,WACvB,OACE,sBAAKZ,UAAU,SAAf,UACE,uBACA,uGACwE,mBAAGa,KAAK,8BAAR,6BAAyD,uBADjI,+BACkK,mBAAGA,KAAK,2BAAR,gCAAyD,uBAD3N,6BAC0P,mBAAGA,KAAK,oDAAR,0BAMjPC,iBAAKF,GCPdG,G,MAAgC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvC,OACE,sBAAKhB,UAAU,SAAf,UACE,qBAAKA,UAAU,eAAf,SAA+BgB,IAC/B,qBAAKhB,UAAU,eAAf,UAA+B,IAAIiB,MAAOC,4BAKjCJ,iBAAKC,GChBL,MAA0B,sCCwM1BI,EA9LO,WAAO,IA6BvBC,EAAYC,EA7BU,EAEQC,mBAAsB,IAF9B,mBAEnB3B,EAFmB,KAER4B,EAFQ,OAIwBD,mBAAS,IAJjC,mBAInBE,EAJmB,KAIAC,EAJA,OAKoBH,mBAAS,IAL7B,mBAKnBI,EALmB,KAKFC,EALE,OAOgCL,mBAAS,IAPzC,mBAOnBM,EAPmB,KAOIC,EAPJ,OAQ4BP,mBAAS,IARrC,mBAQnBQ,EARmB,KAQEC,EARF,OAU0BT,mBAAS,IAVnC,mBAUnBU,EAVmB,KAUCC,EAVD,OAWsBX,mBAAS,IAX/B,mBAWnBY,EAXmB,KAWDC,EAXC,OAaoBb,mBAAS,IAb7B,mBAanBc,EAbmB,KAaFC,EAbE,OAcgBf,mBAAS,IAdzB,mBAcnBgB,EAdmB,KAcJC,EAdI,OAgB8BjB,mBAAS,IAhBvC,mBAgBnBkB,EAhBmB,KAgBGC,EAhBH,OAiB0BnB,mBAAS,IAjBnC,oBAiBnBoB,GAjBmB,MAiBCC,GAjBD,SAmBkCrB,mBAAS,GAnB3C,qBAmBnBsB,GAnBmB,MAmBKC,GAnBL,SAoB8BvB,mBAAS,GApBvC,qBAoBnBwB,GApBmB,MAoBGC,GApBH,SAsBEzB,mBAAS,GAtBX,qBAsBnB/B,GAtBmB,MAsBXyD,GAtBW,SAuB8B1B,oBAAS,GAvBvC,qBAuBnB2B,GAvBmB,MAuBGC,GAvBH,SAwBc5B,mBAAS,GAxBvB,qBAwBnB6B,GAxBmB,MAwBLC,GAxBK,SA0BI9B,oBAAS,GA1Bb,qBA0BnB+B,GA1BmB,MA0BVC,GA1BU,SA2BAhC,mBAAS,IA3BT,qBA2BnBiC,GA3BmB,MA2BZC,GA3BY,MA8BtBP,IACF7B,EAAa7B,GACb8B,EAAWoC,YAAYlE,GAAS4D,IAAcO,QAAQ,MAEtDrC,EAAW9B,GACX6B,EAAaqC,YAAYlE,GAAS4D,IAAcO,QAAQ,KAG1D,IAoCMC,GAAS,uCAAG,0CAAAC,EAAA,sEAEdN,IAAW,GAFG,SAGmBO,IAAMC,IAAI,0CAH7B,cAGRC,EAHQ,gBAIeA,EAAmBC,KAJlC,cAIRC,EAJQ,iBAKkBJ,IAAMC,IAAI,wCAL5B,eAKRI,EALQ,iBAM2BA,EAAkBF,KAN7C,eAMRG,EANQ,OAORC,EAAwBD,EAAcE,QAAO,SAAAjE,GAAY,IACtCkE,EADqC,YAC1BlE,EAA1BmE,WADoD,MACrCD,KACvB,OAAOL,EAAeK,MAExB/C,EAAa6C,GACb3C,EAAqB2C,EAAsB,KAAK/D,MAChD4B,EAAsBmC,EAAsB,KAAKG,WAAW,GAAGC,QAC/D3C,EAAyBuC,EAAsB,KAAKG,WAAW,GAAGD,MAClEjC,EAAmB+B,EAAsB,KAAKK,MAC9ChC,EAAwB2B,EAAsB,KAAKG,WAAW,GAAGlE,MAEjEsB,EAAmByC,EAAsB,IAAI/D,MAC7C8B,EAAoBiC,EAAsB,IAAIG,WAAW,GAAGC,QAC5DzC,EAAuBqC,EAAsB,IAAIG,WAAW,GAAGD,MAC/D/B,EAAiB6B,EAAsB,IAAIK,MAC3C9B,GAAsByB,EAAsB,IAAIG,WAAW,GAAGlE,MAtBhD,UAwBqBwD,IAAMC,IAAN,+CAxBrB,eAwBRY,EAxBQ,iBAyByBA,EAAqBV,KAAKW,MAzBnD,QAyBRC,EAzBQ,OA0BRC,EAAuBC,OAAOC,KAAKH,GAA0B,IACnExB,GAAgBwB,EAAyBC,IACzCvB,IAAW,GA5BG,kDA8BdE,GAAS,KAAIwB,SA9BC,0DAAH,qDAkCTC,GAAwB,uCAAG,8BAAArB,EAAA,mEAEzBhC,IAAyBE,EAFA,iCAGe+B,IAAMC,IAAN,4DAA+DlC,EAA/D,eAA2FE,IAH1G,cAGrBoD,EAHqB,gBAImBA,EAA4BlB,KAAKW,MAJpD,OAIrBQ,EAJqB,OAK3BtC,GAA0BsC,EAAgCrD,GAAqB4B,QAAQ,IACvFX,GAAwBU,YAAY,EAAI0B,EAAgCrD,IAAsB4B,QAAQ,KACtGN,GAAgB+B,EAAgCrD,IAPrB,0DAU7B0B,GAAS,KAAIwB,SAVgB,0DAAH,qDAsB9B,OARAI,qBAAU,WACRzB,OACC,IAEHyB,qBAAU,WACRH,OACC,CAACrD,EAAuBE,IAGzB,eAAC,YAAD,CAAWuD,MAAO,CAAEC,WAAY,OAAQC,UAAW,SAAnD,UACE,cAAC,MAAD,UACE,cAAC,MAAD,UACE,cAAC,EAAD,qCAKJ,cAAC,MAAD,CAAKC,QAAQ,SAAb,SACE,eAAC,MAAD,CAAKH,MAAO,CAACI,SAAU,SAAvB,UACGpC,GAEG,qBAAKrD,UAAU,UAAf,SACE,qBAAKQ,IAAKkF,EAAWjF,IAAKiF,MAG5B,qCACE,cAAC,EAAD,CACErG,eAAgBmC,EAChBlC,kBAhHc,SAACqG,GAC7BlE,EAAqBkE,EAAEC,OAAO3F,OAC9BN,EAAUQ,KAAI,SAAAC,GACRuF,EAAEC,OAAO3F,QAAUG,EAAQC,OAC7BwB,EAAyBzB,EAAQmE,WAAW,GAAGD,MAC/CrC,EAAsB7B,EAAQmE,WAAW,GAAGC,QAC5CnC,EAAmBjC,EAAQqE,MAC3BhC,EAAwBrC,EAAQmE,WAAW,GAAGlE,UAGlDmD,GAAS,KAuGKjE,OAAQ6B,EACR5B,YAxFe,SAACmG,GAC9B3C,GAAUS,WAAWkC,EAAEC,OAAO3F,QAC9BiD,IAAwB,IAuFVzD,yBAAmBmC,EACnBlC,eAAgBsC,EAChBpC,YAAawC,EACbvC,iBAAkB2C,EAClB7C,UAAWA,EACXG,mBAAoBgC,EACpB/B,mBAAoB6C,KAEtB,cAAC,EAAD,CACEvD,eAAgBqC,EAChBpC,kBAhHY,SAACqG,GAC3BhE,EAAmBgE,EAAEC,OAAO3F,OAC5BN,EAAUQ,KAAI,SAAAC,GACRuF,EAAEC,OAAO3F,QAAUG,EAAQC,OAC7B0B,EAAuB3B,EAAQmE,WAAW,GAAGD,MAC7CnC,EAAoB/B,EAAQmE,WAAW,GAAGC,QAC1CjC,EAAiBnC,EAAQqE,MACzB9B,GAAsBvC,EAAQmE,WAAW,GAAGlE,UAGhDmD,GAAS,KAuGKjE,OAAQ8B,EACR7B,YAhGa,SAACmG,GAC5B3C,GAAUS,WAAWkC,EAAEC,OAAO3F,QAC9BiD,IAAwB,IA+FVzD,yBAAmBqC,EACnBpC,eAAgBwC,EAChBtC,YAAa0C,EACbzC,iBAAkB6C,GAClB/C,UAAWA,EACXG,mBAAoB8B,EACpB7B,mBAAoB+C,QAI3BS,IACC,qBAAKvD,UAAU,QAAf,SAAwBuD,UAI9B,cAAC,MAAD,UACE,cAAC,MAAD,UACE,cAAC,EAAD,YC3LVsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2f33024b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Card.scss'\r\nimport { Countries } from './../../helper/interfaces'\r\n\r\ninterface CardProps {\r\n  defaultCountry: string,\r\n  changeSelectValue: (e: React.ChangeEvent<HTMLSelectElement>) => void,\r\n  amount: number,\r\n  changeInput: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n  сurrencyShortName: string,\r\n  currencySymbol: string,\r\n  countries: Countries[],\r\n  countryFlag: string,\r\n  currencyFullName: string,\r\n  currencyFooterName: string,\r\n  footerCurrencyRate: number\r\n}\r\n\r\nconst Card: React.FC<CardProps> = ({ \r\n  defaultCountry, \r\n  changeSelectValue, \r\n  amount, \r\n  changeInput, \r\n  сurrencyShortName, \r\n  currencySymbol, \r\n  countries, \r\n  countryFlag, \r\n  currencyFullName,\r\n  currencyFooterName, \r\n  footerCurrencyRate \r\n}) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"currency__country\">\r\n        <select value={defaultCountry} onChange={changeSelectValue}>\r\n          {countries && countries.map((country) => (\r\n            <option \r\n              key={country.name} \r\n              value={country.name}\r\n            >\r\n              {country.name.length > 25 \r\n                ? \r\n                  country.name.slice(0,30) + '...' \r\n                : \r\n                  country.name\r\n              }\r\n            </option> \r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"currency__content\">\r\n        <div className=\"currency__content__symbol\">\r\n          <p>{currencySymbol} {сurrencyShortName}</p>\r\n          <img src={countryFlag} alt={countryFlag}/>\r\n        </div>\r\n        <input \r\n          type=\"number\" \r\n          value={amount ? amount : ''} \r\n          onChange={changeInput} \r\n          min=\"0\"\r\n        />\r\n      </div>\r\n      <div className=\"currency__board\">\r\n        <div className=\"currency__board__name\">{currencyFullName}</div>\r\n        <div className=\"currency__board__value\">{`1 ${сurrencyShortName} = ${footerCurrencyRate} ${currencyFooterName}`}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React, { memo } from 'react'\r\nimport './Footer.scss'\r\n\r\nconst Footer: React.FC = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n      <hr/>\r\n      <p>\r\n        Currency converter is an app for showing relevant currency rates from <a href=\"https://www.frankfurter.app\">Frankfurter API</a><br/>This project was created by <a href=\"https://github.com/rgdzv\">Ramis Gadzhiomarov</a><br/> You can find code source <a href=\"https://github.com/rgdzv/react-currency-converter\">here</a> \r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(Footer)\r\n","import React, { memo } from 'react'\r\nimport './Header.scss'\r\n\r\ninterface HeaderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ children }) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header__name\">{children}</div>\r\n      <div className=\"header__date\">{new Date().toLocaleDateString()}</div>\r\n    </div> \r\n  )\r\n}\r\n\r\nexport default memo(Header)\r\n","export default __webpack_public_path__ + \"static/media/preloader.20cbc66a.gif\";","import './App.scss'\nimport axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport { Col, Container, Row } from 'react-grid-system'\nimport Card from './components/Card/Card'\nimport Footer from './components/Footer/Footer'\nimport Header from './components/Header/Header'\nimport { Countries } from './helper/interfaces'\nimport preloader from './images/preloader.gif'\n\nconst App: React.FC = () => {\n  \n  const [countries, setCountries] = useState<Countries[]>([])\n\n  const [fromCountryOption, setFromCountryOption] = useState('')\n  const [toCountryOption, setToCountryOption] = useState('')\n\n  const [fromCurrencyShortName, setFromCurrencyShortName] = useState('')\n  const [toCurrencyShortName, setToCurrencyShortName] = useState('')\n\n  const [fromCurrencySymbol, setFromCurrencySymbol] = useState('')\n  const [toCurrencySymbol, setToCurrencySymbol] = useState('')\n\n  const [fromCountryFlag, setFromCountryFlag] = useState('')\n  const [toCountryFlag, setToCountryFlag] = useState('')\n\n  const [fromCurrencyFullName, setFromCurrencyFullName] = useState('')\n  const [toCurrencyFullName, setToCurrencyFullName] = useState('')\n\n  const [fromFooterCurrencyRate, setFromFooterCurrencyRate] = useState(0)\n  const [toFooterCurrencyRate, setToFooterCurrencyRate] = useState(0)\n\n  const [amount, setAmount] = useState(1)\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)\n  const [exchangeRate, setExchangeRate] = useState(0)\n\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n\n  let fromAmount, toAmount\n  if (amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = parseFloat((amount * exchangeRate).toFixed(2))\n  } else {\n    toAmount = amount\n    fromAmount = parseFloat((amount / exchangeRate).toFixed(2))\n  }\n\n  const handleSetFromCurrency = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setFromCountryOption(e.target.value)\n    countries.map(country => {\n      if (e.target.value === country.name){\n        setFromCurrencyShortName(country.currencies[0].code)\n        setFromCurrencySymbol(country.currencies[0].symbol)\n        setFromCountryFlag(country.flag)\n        setFromCurrencyFullName(country.currencies[0].name)\n      }\n    })\n    setError('')\n  }\n\n  const handleSetToCurrency = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setToCountryOption(e.target.value)\n    countries.map(country => {\n      if (e.target.value === country.name){\n        setToCurrencyShortName(country.currencies[0].code)\n        setToCurrencySymbol(country.currencies[0].symbol)\n        setToCountryFlag(country.flag)\n        setToCurrencyFullName(country.currencies[0].name)\n      }\n    })\n    setError('')\n  }\n\n  const handleFromAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setAmount(parseFloat(e.target.value))\n    setAmountInFromCurrency(true)\n  }\n\n  const handleToAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setAmount(parseFloat(e.target.value))\n    setAmountInFromCurrency(false)\n  }\n\n  const fetchData = async () => {\n    try {\n      setLoading(true)\n      const currenciesResponse = await axios.get('https://api.frankfurter.app/currencies')\n      const currenciesData = await currenciesResponse.data\n      const countriesResponse = await axios.get('https://restcountries.eu/rest/v2/all')\n      const countriesData: Countries[] = await countriesResponse.data\n      const filteredCountriesData = countriesData.filter(country => {\n        const { currencies: [{ code }]} = country\n        return currenciesData[code]\n      })\n      setCountries(filteredCountriesData)\n      setFromCountryOption(filteredCountriesData[100].name)\n      setFromCurrencySymbol(filteredCountriesData[100].currencies[0].symbol)\n      setFromCurrencyShortName(filteredCountriesData[100].currencies[0].code)\n      setFromCountryFlag(filteredCountriesData[100].flag)\n      setFromCurrencyFullName(filteredCountriesData[100].currencies[0].name)\n  \n      setToCountryOption(filteredCountriesData[79].name)\n      setToCurrencySymbol(filteredCountriesData[79].currencies[0].symbol)\n      setToCurrencyShortName(filteredCountriesData[79].currencies[0].code)\n      setToCountryFlag(filteredCountriesData[79].flag)\n      setToCurrencyFullName(filteredCountriesData[79].currencies[0].name)\n\n      const baseCurrencyResponse = await axios.get(`https://api.frankfurter.app/latest?from=USD`)\n      const baseCurrencyResponceData = await baseCurrencyResponse.data.rates\n      const filteredBaseCurrency = Object.keys(baseCurrencyResponceData)[26]\n      setExchangeRate(baseCurrencyResponceData[filteredBaseCurrency])\n      setLoading(false)\n    } catch (err) {\n      setError(err.message)\n    }\n  }\n\n  const fetchConvertedCurrencies = async () => {\n    try {\n      if (fromCurrencyShortName && toCurrencyShortName) {\n        const convertedCurrenciesResponse = await axios.get(`https://api.frankfurter.app/latest?&amount=1&from=${fromCurrencyShortName}&to=${toCurrencyShortName}`)\n        const convertedCurrenciesResponseData = await convertedCurrenciesResponse.data.rates\n        setFromFooterCurrencyRate(convertedCurrenciesResponseData[toCurrencyShortName].toFixed(2))\n        setToFooterCurrencyRate(parseFloat((1 / convertedCurrenciesResponseData[toCurrencyShortName]).toFixed(2)))\n        setExchangeRate(convertedCurrenciesResponseData[toCurrencyShortName])\n      }\n    } catch(err) {\n      setError(err.message)\n    }\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  useEffect(() => {\n    fetchConvertedCurrencies()\n  }, [fromCurrencyShortName, toCurrencyShortName])\n\n  return (\n    <Container style={{ paddingTop: '20px', minHeight: '100vh'}}>\n      <Row>\n        <Col>\n          <Header>\n            Currency converter\n          </Header>\n        </Col>\n      </Row> \n      <Row justify='center'>\n        <Col style={{maxWidth: '350px'}}>\n          {loading \n            ?\n              <div className=\"loading\">\n                <img src={preloader} alt={preloader}/>\n              </div>\n            :\n              <>\n                <Card \n                  defaultCountry={fromCountryOption}\n                  changeSelectValue={handleSetFromCurrency}\n                  amount={fromAmount}\n                  changeInput={handleFromAmountChange}\n                  сurrencyShortName={fromCurrencyShortName}\n                  currencySymbol={fromCurrencySymbol}\n                  countryFlag={fromCountryFlag}\n                  currencyFullName={fromCurrencyFullName}\n                  countries={countries}\n                  currencyFooterName={toCurrencyShortName}\n                  footerCurrencyRate={fromFooterCurrencyRate}\n                />\n                <Card \n                  defaultCountry={toCountryOption}\n                  changeSelectValue={handleSetToCurrency}\n                  amount={toAmount}\n                  changeInput={handleToAmountChange}\n                  сurrencyShortName={toCurrencyShortName}\n                  currencySymbol={toCurrencySymbol}\n                  countryFlag={toCountryFlag}\n                  currencyFullName={toCurrencyFullName}\n                  countries={countries}\n                  currencyFooterName={fromCurrencyShortName}\n                  footerCurrencyRate={toFooterCurrencyRate}\n                />\n              </>\n          }\n          {error &&\n            <div className=\"error\">{error}</div>\n          }\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Footer/>\n        </Col>\n      </Row>   \n    </Container>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}